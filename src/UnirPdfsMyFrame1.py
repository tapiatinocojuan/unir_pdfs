"""Subclass of MyFrame1, which is generated by wxFormBuilder."""

import wx
import unir_pdfs
from PyPDF2 import PdfMerger

# Implementing MyFrame1
class UnirPdfsMyFrame1( unir_pdfs.MyFrame1 ):
    def __init__( self, parent ):
        unir_pdfs.MyFrame1.__init__( self, parent )
        self.m_panel3.DragAcceptFiles( True )
        self.archivos = []
        self.img = wx.Image(u"img/fondo.png", wx.BITMAP_TYPE_ANY)
        self.m_panel3.Refresh()

    # Handlers for MyFrame1 events.
    def on_unir( self, event ):
        fdlg = wx.FileDialog(
            self,
            "Selecciona un archivo pdf", "", "", 
            "*.pdf", wx.FD_SAVE
        )
        if fdlg.ShowModal() != wx.ID_OK:
            return
        nombre_archivo_salida = fdlg.GetPath() 
        fusionador = PdfMerger()
        for archivo in self.archivos:
            fusionador.append(open(archivo[0], 'rb'))
        with open(nombre_archivo_salida, 'wb') as salida:
            fusionador.write(salida)
        self.m_statusBar1.SetStatusText(
            f"{nombre_archivo_salida} exportado con exito!"
        )

    def get_tabla_data(self, grid):
        """Obtiene la información de la tabla y la entrega como una lista de listas"""
        num_rows = grid.GetNumberRows()
        num_cols = grid.GetNumberCols()
        data = []
        for row in range(num_rows):
            aux = []
            for col in range(num_cols):
                aux.append(grid.GetCellValue(row, col))
            data.append(aux)
        return data

    def clean_tabla_data(self, grid):
        """Borra la informacion de una tabla"""
        num_rows = grid.GetNumberRows()
        if num_rows != 0:
            grid.DeleteRows(numRows=num_rows)

    def set_tabla_data(self, grid, data):
        """Borra la informacion de una tabla y la rellena con los valores en data"""
        self.clean_tabla_data(grid)
        grid.InsertRows(numRows=len(data))
        for i, row in enumerate(data):
            for j, cell_value in enumerate(row):
                if isinstance(cell_value, dict):
                    choice_editor = wx.grid.GridCellChoiceEditor(cell_value["data"], True)
                    grid.SetCellValue(i,j,str(cell_value["eleccion"]))
                    grid.SetCellEditor(i, j, choice_editor)
                else:
                    grid.SetCellValue(i,j,str(cell_value))
        grid.Refresh()

    def on_drop_files(self, event):
        """Añade archivos a la lista de fusionado"""
        for archivo in event.GetFiles():
            if archivo.endswith(".pdf"):
                self.archivos.append([archivo])
        self.refresh_files_data(None)

    def refresh_files_data(self, event):
        """Actualiza la lista de archivos que se desean unir"""
        self.set_tabla_data(self.m_grid1, self.archivos)


    def on_up_file(self, event):
        """Mueve una posicion hacia arriba el archivo seleccionado en la lista"""
        rows = self.m_grid1.GetSelectedRows()
        aux = []
        for row in sorted(rows, reverse=True):
            file = self.archivos.pop(row)
            aux.append(file)
        for file in aux:
            if row == 0:
                self.archivos.insert(row, file)
            else:
                self.archivos.insert(row-1, file)
        self.refresh_files_data(None)
    
    def on_down_file(self, event):
        """Mueve una posicion hacia abajo el archivo seleccionado en la lista"""
        rows = self.m_grid1.GetSelectedRows()
        aux = []
        for row in sorted(rows, reverse=True):
            file = self.archivos.pop(row)
            aux.append(file)
        for file in aux:
            self.archivos.insert(row+1, file)
        self.refresh_files_data(None)

    def on_del_file(self, event):
        """Borra los archivos seleccionados de la lista"""
        rows = self.m_grid1.GetSelectedRows()
        for row in sorted(rows, reverse=True):
            self.archivos.pop(row)
        self.refresh_files_data(None)
    
    def on_add_file(self, event):
        """Añade un archivo seleccionado a la lista"""
        fdlg = wx.FileDialog(
            self,
            "Selecciona un archivo pdf", "", "", 
            "*.pdf", wx.FD_OPEN
        )
        if fdlg.ShowModal() == wx.ID_OK:
            file = fdlg.GetPath()    
            self.archivos.append([file])
        self.refresh_files_data(None)

    def on_paint(self, event):
        """Metodo para dibujar sobre un panel"""
        self.pintar(self.m_panel3, self.img)

    def pintar(self, panel, img):
        """Redibuja una imagen sobre un panel"""
        dc = wx.PaintDC(panel)
        dc.SetBackground(wx.Brush("WHITE"))
        ancho, alto = panel.GetSize()
        if 0 in (ancho, alto):
            return 
        if img:
            imagenEscalada = img.Scale(ancho, alto, wx.IMAGE_QUALITY_HIGH)
            bitmap = imagenEscalada.ConvertToBitmap()
            dc.DrawBitmap(bitmap, 0, 0, True)
        else:
            pass

    def on_size_change(self, event):
        self.Layout()
        self.Update()
        self.m_panel3.Refresh()

    def on_sash_changed(self, event):
        self.m_panel3.Refresh()

def main():
    app = wx.App()
    ex = UnirPdfsMyFrame1(None)
    ex.Show()
    app.MainLoop()


if __name__ == '__main__':
    main()

